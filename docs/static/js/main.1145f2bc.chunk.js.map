{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","Inputvalue","setInputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OAEQ,sBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAtBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCVdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,4BAAKA,QCHJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAO,GACPa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACHxB,EAASC,GACRwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAG1B,CAACpB,IAEIqB,EDf0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAYrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OAEX,cAAC,EAAD,eAESA,GADAA,EAAIC,aE3BxBgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAWA,OACI,gCACI,+CACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OAEpB,cAAC,EAAD,CAEIA,SAAWA,GADJA,U,MCrB/B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1145f2bc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n// poner '' para que el state inicial no sea undefined\r\nconst [Inputvalue, setInputvalue] = useState('')\r\n\r\n\r\n\r\nconst handleInputChange = (e) => {\r\n    setInputvalue(e.target.value);\r\n}\r\n\r\n\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if(Inputvalue.trim().length > 2){\r\n        setCategories(cats => [Inputvalue, ...cats])\r\n        setInputvalue('')\r\n    }\r\n\r\n}\r\n\r\n\r\nreturn (\r\n   \r\n        <form onSubmit={ handleSubmit }>         \r\n            <input\r\n                type=\"text\"\r\n                value={ Inputvalue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=XmSjGBvqIs5nOYK7TytMxisysZRaDDcw`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n   // console.log(data)\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n  \r\n    return gifs;\r\n\r\n} ","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url }) => {\r\n\r\n    //console.log(props)\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={ url} alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n   \r\n    const { data:images, loading } = useFetchGifs(category);\r\n    \r\n    // Cuando en una funcion su argumento es enviado como argumento de otra\r\n    // se puede llamar directamente a la funcion\r\n    /*\r\n         .then( imgs => setImages(imgs) )\r\n\r\n         .then( setImages )\r\n    \r\n    */\r\n \r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>            \r\n\r\n            { loading && <p className='animate__animated animate__flash' >Loading</p>}\r\n            <div className=\"card-grid\">\r\n                        \r\n                {                    \r\n                    images.map( img => (\r\n                        \r\n                        <GifGridItem  \r\n                            key={img.id}\r\n                            { ...img }                        \r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport  { useEffect, useState } from 'react'\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n// los effect no pueden ser async \r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data : [],\r\n        loading: true\r\n    })\r\n    // el componente solo debe renderizarse y cargarse cuando cambia la categoria\r\n    useEffect( ()=> {\r\n            getGifs( category)\r\n            .then( imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading:false\r\n                    })                   \r\n            } )\r\n    },[category])\r\n\r\n    return state;\r\n\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //const categories = ['Banana', 'Manzana', 'Pera'];\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    //const handledAdd = () => {\r\n        //usando spread\r\n        // setCategories([...categories, 'Frutilla'])\r\n        //cambiando orden\r\n        //setCategories([ 'Frutilla', ...categories])\r\n        //toma el estado actual y le agrega uno mas\r\n        //setCategories( cats => [...cats, 'Higo'])\r\n    //}\r\n\r\n    return(\r\n        <div>\r\n            <h2> GifExpertApp</h2>\r\n            <AddCategory  setCategories={setCategories} />\r\n            <hr />\r\n            {\r\n                categories.map( category => \r\n                \r\n                    <GifGrid\r\n                        key= { category }\r\n                        category={ category }                    \r\n                    />\r\n                \r\n                )\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport './index.css';\n\nReactDOM.render(  \n    <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}